#!/usr/bin/env php
<?php
require_once(__DIR__.'/common.php');

// Database
$cursor = $db->querySingle('SELECT cursor FROM cursor');
$add_stmt = $db->prepare("INSERT INTO temp (ts, value) VALUES (?,?)");
$cursor_stmt = $db->prepare("UPDATE cursor SET cursor=?");

// 0MQ
$zmq_context = new ZMQContext();
$zmq_publisher = $zmq_context->getSocket(ZMQ::SOCKET_PUB);
$ipc_path = __DIR__.'/updates.ipc';
$zmq_publisher->bind("ipc://".$ipc_path);
chmod($ipc_path, 0777); // Allow access to all local users

print("$cursor\n");

while (true) {
    $line = fgets(STDIN);
    if ($line === FALSE) {
        // It's over.
        break;
    }

    $vars = json_decode($line);
    if ($vars === NULL) {
        fwrite(STDERR, "Ignoring: Not in systemd log export format\n");
        continue;
    }

    if ($vars->__CURSOR === $cursor) {
        fwrite(STDERR, "Ignoring: Duplicated packet\n");
        continue;
    }   
    
    $rtl_433 = json_decode($vars->MESSAGE);
    if ($rtl_433 === NULL) {
        fwrite(STDERR, "Ignoring: Not rtl_433 output\n");
        continue;
    }

    if ($rtl_433->id !== 36) {
        fwrite(STDERR, "Ignoring: Not our temperature sensor\n");
        continue;
    }

    // Now inserting the data and updating the cursor position
    $db->exec('BEGIN');
    // Correct data. Store it.
    $data = [
        floor($vars->__REALTIME_TIMESTAMP / 1000000), // seconds
        $rtl_433->temperature_C,
    ];
    db_execute($add_stmt, $data);
    array_unshift($data, $db->lastInsertRowID());
    db_execute($cursor_stmt, [$vars->__CURSOR]);
    $db->exec('END');

    // After storing the data, notify. Other way around the long
    // poller might miss some data. And rowid wouldn't be available.
    $out = implode(',',$data);
    $zmq_publisher->send($out);
    print("$out\n");
}
